import java.util.*;
import java.util.stream.*;

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String toString() {
        return name + " (" + category + ") - " + price;
    }
}

public class PartC_ProductStreams {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product("Laptop", "Electronics", 800),
                new Product("Phone", "Electronics", 600),
                new Product("Shirt", "Clothing", 40),
                new Product("Jeans", "Clothing", 50),
                new Product("TV", "Electronics", 1200),
                new Product("Socks", "Clothing", 10)
        );

        // 1. Group by category
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));

        System.out.println("Products grouped by category:");
        grouped.forEach((k, v) -> System.out.println(k + ": " + v));

        // 2. Max priced product per category
        System.out.println("\nMax priced product per category:");
        grouped.forEach((category, list) -> {
            Product maxProduct = list.stream()
                    .max(Comparator.comparingDouble(p -> p.price))
                    .get();
            System.out.println(category + ": " + maxProduct);
        });

        // 3. Average price per category
        System.out.println("\nAverage price per category:");
        grouped.forEach((category, list) -> {
            double avg = list.stream()
                    .mapToDouble(p -> p.price)
                    .average()
                    .orElse(0);
            System.out.println(category + ": " + avg);
        });
    }
}
